import os

from flask import (
    Flask,
    jsonify,
    send_from_directory,
    request,
    render_template,
    redirect,
    url_for,
    make_response,
    session,
    flash
)
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text, create_engine
import sqlalchemy
import psycopg2
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
import bleach
import datetime


app = Flask(__name__)
app.config.from_object("project.config.Config")
db = SQLAlchemy(app)


class User(db.Model):
    __tablename__ = "users"

    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(128), unique=True, nullable=False)
    active = db.Column(db.Boolean(), default=True, nullable=False)

    def __init__(self, email):
        self.email = email


db_url = "postgresql://postgres:pass@postgres:5432"
engine = sqlalchemy.create_engine(db_url, connect_args={'application_name': '__init__.py root()',})
connection = engine.connect()



def are_credentials_good(username, password):
     sql = sqlalchemy.sql.text('''
        SELECT id FROM users
        WHERE username = :username
        AND password = :password
        ;
        ''')

    cred = connection.execute(sql, {
        'username': username,
        'password': password
        })

    if cred.fetchone() is None:
        return False
    else:
        return True


@app.route("/")
def root():
    get_tweets = connection.execute(text(
        "SELECT users.name, users.screen_name, tweets.text, tweets.created_at "
        "FROM tweets "
        "JOIN users on users.id_users = tweets.id_users "
        "ORDER BY tweets.created_at DESC "
        "LIMIT 20;"
    ))

    tweet_list = [] 
    for row in get_tweets.fetchall():
        tweet_list.append({
            'user_name': row[0],
            'screen_name': row[1],
            'text': row[2],
            'created_at': row[3]
        })
    return render_template('home.html', tweet_list=tweet_list)


@app.route('/login', methods=['GET', 'POST'])
def login():
    username = request.cookies.get('username')
    password = request.cookies.get('password')

    logged_in = are_credentials_good(username, password)

    if logged_in:
        return redirect('/')

    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')

        good_credentials = are_credentials_good(username, password)

        if good_credentials:
            # Create a response with a redirect and set cookies
            response = make_response(redirect('/'))
            response.set_cookie('username', username)
            response.set_cookie('password', password)
            return response
        else:
            return render_template('login.html', bad_credentials=True)

    return render_template('login.html', bad_credentials=False)


@app.route("/logout")
def logout():
    session.pop('username', None)  # Remove the username from the session
    return redirect(url_for('login'))

from flask import make_response

@app.route('/create_account', methods=['GET', 'POST'])
def create_user():
    username = request.cookies.get('username')
    password = request.cookies.get('password')

    logged_in = are_credentials_good(username, password)

    if logged_in:
        return redirect('/')

    if request.method == 'POST':
        new_username = request.form.get('new_username')
        new_password = request.form.get('new_password')
        new_password2 = request.form.get('new_password2')

        if new_username is None:
            return render_template('create_account.html')
        elif not all([new_username, new_password, new_password2]):
            return render_template('create_account.html', one_blank=True)
        elif new_password != new_password2:
            return render_template('create_account.html', not_matching=True)

        try:
            # Insert new user into the database
            sql = sqlalchemy.sql.text('''
                INSERT INTO users (username, password)
                VALUES (:username, :password)
            ''')

            res = connection.execute(sql, {
                'username': new_username,
                'password': new_password
            })

            # Set cookies for the new user
            response = make_response(redirect('/'))
            response.set_cookie('username', new_username)
            response.set_cookie('password', new_password)
            return response
        except sqlalchemy.exc.IntegrityError:
            return render_template('create_account.html', already_exists=True)

    return render_template('create_account.html')


@app.route("/create_message")
def create_message():
    return render_template('create_message.html')


@app.route("/search")
def search():
    return render_template('search.html')


@app.route('/home')
def home():
    return render_template('home.html')
    
@app.route("/static/<path:filename>")
def staticfiles(filename):
    return send_from_directory(app.config["STATIC_FOLDER"], filename)


@app.route("/media/<path:filename>")
def mediafiles(filename):
    return send_from_directory(app.config["MEDIA_FOLDER"], filename)


@app.route("/upload", methods=["GET", "POST"])
def upload_file():
    if request.method == "POST":
        file = request.files["file"]
        filename = secure_filename(file.filename)
        file.save(os.path.join(app.config["MEDIA_FOLDER"], filename))
    return """
    <!doctype html>
    <title>upload new File</title>
    <form action="" method=post enctype=multipart/form-data>
      <p><input type=file name=file><input type=submit value=Upload>
    </form>
    """
